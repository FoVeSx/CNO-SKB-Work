{
    "tests": [
        {
            "client_console": "gcc -c -o gfclient.o -Wall -Werror --std=gnu99 -g3 -fsanitize=address -fno-omit-frame-pointer -Wno-format-security gfclient.c\ngcc -c -o workload.o -Wall -Werror --std=gnu99 -g3 -fsanitize=address -fno-omit-frame-pointer -Wno-format-security workload.c\ngcc -c -o gfclient_download.o -Wall -Werror --std=gnu99 -g3 -fsanitize=address -fno-omit-frame-pointer -Wno-format-security gfclient_download.c\ngcc -o gfclient_download -Wall -Werror --std=gnu99 -g3 -fsanitize=address -fno-omit-frame-pointer -Wno-format-security gfclient.o workload.o gfclient_download.o -lpthread -static-libasan\n",
            "client_returncode": "0",
            "extra_data": "",
            "passfail": "passed",
            "name": "Test that the client compiles"
        },
        {
            "client_console": "Received Response: GETFILE ERROR \r\n\r\n\ufffd\ufffd\ufffd\ufffd\n",
            "client_returncode": "0",
            "server_console": "",
            "server_returncode": "-13",
            "extra_data": "",
            "passfail": "passed",
            "name": "Test that the client properly handles an ERROR response"
        },
        {
            "client_console": "Received Response: GETFILE FILE_NOT_FOUND \r\n\r\n\ufffd\ufffd\ufffd\ufffd\n",
            "client_returncode": "0",
            "server_console": "",
            "server_returncode": "-13",
            "extra_data": "",
            "passfail": "passed",
            "name": "Test that the client properly handles a FILE_NOT_FOUND response"
        },
        {
            "client_console": "Failed to parse chunk data.: Cannot assign requested address\nReceived Response: GETFILE OK 233174\r\n\r\n\nChunk data corrupt.\ngfc_perform returned an error -1\n",
            "client_returncode": "0",
            "server_console": "",
            "server_returncode": "null",
            "extra_data": "",
            "passfail": "passed",
            "name": "Test that the client properly handles prematurely closed connection during transfer of the message body"
        },
        {
            "client_console": "Failed to parse header.: Cannot assign requested address\nReceived Response: GE\ufffd\ufffd\ufffd\ufffd\nINVALID HEADER.\ngfc_perform returned an error -1\n",
            "client_returncode": "0",
            "server_console": "",
            "server_returncode": "-13",
            "extra_data": "",
            "passfail": "passed",
            "name": "Test that the client properly handles an invalid header"
        },
        {
            "client_console": "Requesting localhost/filecorpus/paraglider.jpg}\nReceived Response: GETFILE OK 233174\r\n\r\n\ufffd\ufffd\ufffd\ufffd\nStatus: OK\nReceived 233174 of 233174 bytes\n",
            "client_returncode": "0",
            "server_console": "",
            "server_returncode": "null",
            "extra_data": "",
            "passfail": "passed",
            "name": "Test that the client properly handles an OK response and long message (more than 5 MB) sent in varying size chunks between 64 bytes and 64KB"
        },
        {
            "client_console": "Requesting localhost/filecorpus/1kb-sample-file-1.html}\nReceived Response: GETFILE OK 816\r\n\r\n\nStatus: OK\nReceived 816 of 816 bytes\n",
            "client_returncode": "0",
            "server_console": "",
            "server_returncode": "null",
            "extra_data": "",
            "passfail": "passed",
            "name": "Test that the client properly handles an OK response and a short message (less than 1000 bytes)"
        },
        {
            "client_console": "==169== Memcheck, a memory error detector\n==169== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==169== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info\n==169== Command: ./gfclient_download_noasan -w workload.txt\n==169== \nRequesting localhost/filecorpus/paraglider.jpg}\nReceived Response: GETFILE OK 233174\r\n\r\n\ufffd\ufffd\ufffd\ufffd\nStatus: OK\nReceived 233174 of 233174 bytes\n==169== \n==169== HEAP SUMMARY:\n==169==     in use at exit: 114 bytes in 4 blocks\n==169==   total heap usage: 46 allocs, 42 frees, 42,675 bytes allocated\n==169== \n==169== LEAK SUMMARY:\n==169==    definitely lost: 0 bytes in 0 blocks\n==169==    indirectly lost: 0 bytes in 0 blocks\n==169==      possibly lost: 0 bytes in 0 blocks\n==169==    still reachable: 114 bytes in 4 blocks\n==169==         suppressed: 0 bytes in 0 blocks\n==169== Reachable blocks (those to which a pointer was found) are not shown.\n==169== To see them, rerun with: --leak-check=full --show-leak-kinds=all\n==169== \n==169== For lists of detected and suppressed errors, rerun with: -s\n==169== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n",
            "client_returncode": "0",
            "server_console": "",
            "server_returncode": "null",
            "extra_data": "",
            "passfail": "passed",
            "name": "Test that valgrind shows no memory leaks"
        }
    ],
    "execution_time": "10.56",
    "score": "8/8"
}
